package ui;

import model.Capsule;
import model.Project;
import utils.Utils;

public class Main {
    /*
    For the project class, when Green accepts a project from a client, it must store the project name, client name, planned start date for the project and planned end date for the project, the value corresponding to the project budget and the names and cell phone numbers of both Green’s and client’s project managers.
    For each stage of a project (start, analysis, design, execution, closure and monitoring and control of the project), each stage will have a planned start and end date as well as an actual start and end date. Additionally, approval of compliance with the stage is saved.
    For knowledge capsules generated by collaborators in each stage of a project: A capsule has a unique identifier, a description of the situation to be recorded, a type of capsule (technical, management, domain or experiences), the name and position of the collaborator and learning or lesson learned from that situation.
    */

    private static Project[] projects = new Project[10];
    private static int projectCount = 0;
    private static int projectId;
    private static int capsuleId;
    private static int option;

    public static void main(String[] args) {
        do {
            Utils.menu();
            option = Utils.inputNumbers.nextInt();
            switch (option) {
                case 1:
                    projects[projectCount] = new Project();
                    projectCount++;
                    break;
                case 2:
                    Utils.print("Project number: ");
                    int project = Utils.inputNumbers.nextInt();
                    Utils.print("Stage number: ");
                    int stage = Utils.inputNumbers.nextInt();
                    projects[project - 1].getStages().setStageActive(stage);
                    break;
                case 3:
                    String collabName = Utils.inputString.readLine();
                    String collabPost = Utils.inputString.readLine();
                    String description = Utils.inputString.readLine();
                    String learning = Utils.validateLearning();
                    String type = Utils.validateType();
                    Capsule capsule = new Capsule(collabName, collabPost, description, learning, type);
                    capsule.printCapsule();
                    break;
                case 4:
                    Utils.print("Insert project id: ");
                    projectId = Utils.inputNumbers.nextInt();
                    Utils.print("Insert capsule id: ");
                    capsuleId = Utils.inputNumbers.nextInt();
                    projects[projectId - 1].getStage().getCapsules()[capsuleId - 1].setApproved();
                    break;
                case 5:
                    Utils.print("Insert project id: ");
                    projectId = Utils.inputNumbers.nextInt();
                    Utils.print("Insert capsule id: ");
                    capsuleId = Utils.inputNumbers.nextInt();
                    projects[projectId - 1].getStage().getCapsules()[capsuleId - 1].generateHTML();
                case 7:
                    Utils.print("Exit.");
                default:
                    Utils.print("Invalid option");
                    break;
            }
        } while (option != 7);
    }
}